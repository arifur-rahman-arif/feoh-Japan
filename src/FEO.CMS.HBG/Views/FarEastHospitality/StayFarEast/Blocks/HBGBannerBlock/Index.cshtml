@model FEO.CMS.HBG.Core.Blocks.StayFarEast.HBGBannerBlock

@{
    var config = Model;
    var tourUrl = ViewData["TourUrl"] as string;
    var imageDarkenedOverlay = config != null && config.EnableDarknessOverlayImage ? "image-darkened-overlay" : string.Empty;
    var renderingCssClass = string.Empty;
    if (Model.StyleNames != null)
    {
        List<string> cssClass = new List<string>();
        var styleNames = BlockHelper.GetContentAreaItems(Model.StyleNames);
        foreach (var item in styleNames)
        {
            cssClass.Add(ContentLoader.Get<HBGNameValuePairBlock>(item.ContentLink).Value);
        }
        renderingCssClass = String.Join(" ", cssClass);
    }
}
@if (Model.ShowBannerTitle || Model.ShowBannerSummary || Model.ShowCurrentItemTitle || Model.ShowCurrentItemCaption)
{
    if (Model != null)
    {
        <div class="@(Model.EmbedAsBackground ? "main-banner static-content" : "banner") @imageDarkenedOverlay">
            @* @Html.Banner(Model, new { @id = "pretzel-video", @class = "video-playing" }) *@
            <div class="banner-content text-center">
                <div class="content-table-container">
                    <div class="table-v-middle">
                        <h2>@Model.RootTitle</h2>
                        <p>@Model.RootSummary)</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div id="carousel-example-generic" class="carousel slide @renderingCssClass static-content @imageDarkenedOverlay" data-ride="carousel">
            <!-- Wrapper for slides -->
            <div class="carousel-inner" role="listbox">
                <div class="item active carousel-image">
                    @if (Model.Poster != null)
                    {
                        <img class="lazy-hidden @(Model.PosterForMobile == null ? string.Empty : "hidden-xs hidden-sm")" data-lazy-type="image" data-lazy-src="@Url.ContentUrl(Model.Poster)" alt="" />
                    }

                    @if (Model.PosterForMobile != null)
                    {
                        <img class="lazy-hidden visible-xs visible-sm" data-lazy-type="image" data-lazy-src="@Url.ContentUrl(Model.PosterForMobile)" alt="" />
                    }

                    <div class="carousel-caption carousel-v-caption">
                        <div class="carousel-v-align">

                            @if (Model.ShowCurrentItemTitle || Model.ShowCurrentItemCaption)
                            {
                                var currentItem = Model;
                                if (config.ShowCurrentItemTitle)
                                {
                                    if (config.EnlargeCurrentItemTitle)
                                    {
                                        <h1>@Model.RootTitle)</h1>
                                    }
                                    else
                                    {
                                        <h2>@Model.RootTitle)</h2>
                                    }
                                }
                                if (config.ShowCurrentItemCaption)
                                {
                                    @* var thumbnail = currentItem as IThumbnailPreview;
                                    if (thumbnail != null)
                                    {
                                        <p class="text-uppercase">@thumbnail.GetCaption()</p>
                                    } *@
                                }
                            }

                            @if (config.ShowBannerTitle)
                            {
                                <h1>@Model.RootTitle</h1>
                            }
                            @if (config.ShowBannerSummary)
                            {
                                if (config.UseDescriptionAsSummary)
                                {
                                    @Model.RootDescription
                                }
                                else
                                {
                                    <p>@Model.RootSummary</p>
                                }
                            }

                        </div>
                    </div>

                    <div class="note color-white hidden-xs"><i>@Model.Caption</i></div>
                </div>
                @if (!string.IsNullOrEmpty(tourUrl))
                {
                    <div class="venue-view360 btn-view-360" data-roomsauce="@tourUrl"></div>
                }
            </div>
            @if (!string.IsNullOrEmpty(tourUrl))
            {
                <div class="wrap-iframe360">
                    <iframe class="app-threesixty-panoframe" width="100%" height="100%" frameborder="0" allowfullscreen="" src="" style="visibility: visible; opacity: 1;" title="iframe 360"></iframe>
                </div>
                <div class="close-three-sixty">X</div>
            }
        </div>
    }
}
else
{
    <div class="@(Model.EmbedAsBackground ? "image-background  video-masthead main-banner" : "banner") @imageDarkenedOverlay">
        @* @if (Model.Sources.IsNotNullAndAny() && !DeviceUtil.IsMobile() && Model.BackgroundVideo != null && !string.IsNullOrEmpty(Model.BackgroundVideo.Url))
        {
            //@Html.Banner(Model, new { @id = "pretzel-video", @class = "video-playing" })
            <div class="video-control container">
                <span class="video-play active">
                    <svg class="on" xmlns="http://www.w3.org/2000/svg" width="21.831" height="25" viewBox="0 0 21.831 25">
                        <path id="Polygon_1" data-name="Polygon 1" d="M12.5,0,25,21.831H0Z" transform="translate(21.831) rotate(90)" fill="rgba(241,241,241,0.9)" />
                    </svg>
                    <svg class="off" xmlns="http://www.w3.org/2000/svg" width="15" height="25" viewBox="0 0 15 25">
                        <g id="Group_124603" data-name="Group 124603" transform="translate(-88 -535)">
                            <rect id="Rectangle_3525" data-name="Rectangle 3525" width="5" height="25" transform="translate(88 535)" fill="rgba(241,241,241,0.9)" />
                            <rect id="Rectangle_3526" data-name="Rectangle 3526" width="5" height="25" transform="translate(98 535)" fill="rgba(241,241,241,0.9)" />
                        </g>
                    </svg>
                </span>
            </div>

            <video class="video-playing" playsinline autoplay="autoplay" loop="loop" muted="muted" poster="@(Url.ContentUrl(Model.Poster))">
                <source src="@Model.BackgroundVideo.Url">
            </video>
        }
        else
        { *@
            <div class="banner-img @(Model.EmbedAsBackground ? "image-container" : string.Empty)">
                <img class="lazy-hidden" data-lazy-type="image" data-lazy-srcset="@(!string.IsNullOrEmpty(Url.ContentUrl(Model.PosterForMobile)) ? $"{Url.ContentUrl(Model.PosterForMobile)} 767w," : string.Empty) @Url.ContentUrl(Model.Poster)" alt="" />
            </div>
        @* } *@
    </div>
}

<div class="sfevdo_btn">
    <!-- Video FEH 724 -->
   @*  @if (Model.VideoSource != null && !String.IsNullOrEmpty(Model.VideoSource.Url))
    {
        @StayFarEast.RenderLink(Model, model => model.VideoSource, new System.Collections.Specialized.NameValueCollection { { "class", "btn btn-primary video-btn" } }, isEditable: true)
    } *@
</div>
<div class="modal fade video venue-modal" id="videoModal" tabindex="-1" role="dialog" aria-labelledby="videoModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close close-video-modal" data-dismiss="modal">&times;</button>
                <div class="embed-responsive embed-responsive-16by9">
                </div>
            </div>
        </div>
    </div>
</div>