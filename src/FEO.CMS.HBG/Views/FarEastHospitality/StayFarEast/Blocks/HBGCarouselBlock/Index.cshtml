@model HBGCarouselBlock


@if (Model != null && Model.ChildrenFolderReference != null)
{
    var items = ContentLoader.GetChildren<HBGCarouselItemBlock>(Model.ChildrenFolderReference);
    var CarouselIdBlock = ContentLoader.Get<HBGNameValuePairBlock>(Model.CarouselIdName);
    var CarouselIdName = !string.IsNullOrEmpty(CarouselIdBlock.Value) ? CarouselIdBlock.Value : "carousel-slide";
    string imageDarkenedOverlay = Model != null && Model.EnableDarknessOverlayImage ? "image-darkened-overlay" : string.Empty;

    <!-- carousel -->
    <div class="@Model.CSSClassName @(Model.RemoveContentPadding ? string.Empty : "static-content")">
        <div id="@CarouselIdName" class="video-masthead carousel slide @imageDarkenedOverlay" data-interval="false">
            @if (items.Any(x => x.IsBackgroundVideo))
            {
                <div class="video-control container">
                    <span class="video-play active">
                        <svg class="on" xmlns="http://www.w3.org/2000/svg" width="21.831" height="25" viewBox="0 0 21.831 25">
                            <path id="Polygon_1" data-name="Polygon 1" d="M12.5,0,25,21.831H0Z" transform="translate(21.831) rotate(90)" fill="rgba(241,241,241,0.9)" />
                        </svg>
                        <svg class="off" xmlns="http://www.w3.org/2000/svg" width="15" height="25" viewBox="0 0 15 25">
                            <g id="Group_124603" data-name="Group 124603" transform="translate(-88 -535)">
                                <rect id="Rectangle_3525" data-name="Rectangle 3525" width="5" height="25" transform="translate(88 535)" fill="rgba(241,241,241,0.9)" />
                                <rect id="Rectangle_3526" data-name="Rectangle 3526" width="5" height="25" transform="translate(98 535)" fill="rgba(241,241,241,0.9)" />
                            </g>
                        </svg>
                    </span>
                </div>
            }

            @if ((items == null || !items.Any()) && ContextMode.CurrentMode.EditOrPreview())
            {
                <h2 class="text-center">Add Carousel Items</h2>
            }
            @if (Model.ShowIndicator && items.Count() > 1)
            {
                <!-- Indicators -->
                <ol class="carousel-indicators">
                    @for (int index = 0; index < items?.Count(); index++)
                    {
                        if (index == 0)
                        {
                            <li data-target="#@CarouselIdName" data-slide-to="@index" class="active"></li>
                        }
                        else
                        {
                            <li data-target="#@CarouselIdName" data-slide-to="@index"></li>
                        }
                    }
                </ol>
            }

            <!-- Wrapper for slides -->
            <div class="carousel-inner 11">

                @for (int index = 0; index < items?.Count(); index++)
                {
                    var item = items.ElementAt(index);

                    <div class="item @(item.IsBackgroundVideo ? "item-video" : string.Empty)  @(index == 0 ? "active" : string.Empty) @(item.IsVideo || item.IsFeatured || item.IsBackgroundVideo ? "carousel-image" : string.Empty)">

                        @if (item.IsVideo)
                        {
                            <a class="thumb-34" href="#" data-toggle="modal" data-target="#@Model.VideoTarget" data-videosource="@item.VideoSource?.Href">
                                <img width="1300" height="500" class="lazy-hidden" data-lazy-type="image" data-lazy-srcset="@((item.ImageForMobile != null) ? $"{Url.ContentUrl(item.ImageForMobile)} 767w" : string.Empty), @Url.ContentUrl(item.Image)" alt="" />
                            </a>
                        }
                        else
                        {
                            <div class="thumb-34">
                                @if (item.IsBackgroundVideo)
                                {
                                    <video class="video-playing" playsinline @(items.Count() == 1 ? "loop='loop'" : string.Empty) autoplay="autoplay" muted="muted" poster="@(Url.ContentUrl(item.Image))">
                                        <source src="@(item.BackgroundVideo?.Href)">
                                    </video>
                                }
                                else
                                {
                                    <img width="1300" height="500" class="lazy-hidden" data-lazy-type="image" data-lazy-srcset="@((item.ImageForMobile != null) ? $"{Url.ContentUrl(item.ImageForMobile)} 767w" : string.Empty), @Url.ContentUrl(item.Image)" alt="" />
                                }
                            </div>
                        }

                        <div class="carousel-caption @(Model.IsVerticalAligned ? "carousel-v-caption" : string.Empty)">
                            @if (item.IsVideo)
                            {
                                <a href="#" data-toggle="modal" data-target="#@Model.VideoTarget" data-videosource="@item.VideoSource?.Href">
                                    <img loading="lazy" src="~/content/images/play-btn.png" alt="" />
                                </a>
                            }
                            @if (!string.IsNullOrWhiteSpace(item.FeaturedTitle))
                            {
                                <p class="feature">@Html.PropertyFor(x => item.FeaturedTitle)</p>
                            }
                            @if (Model.IsVerticalAligned)
                            {
                                <div class="carousel-v-align">
                                    @if (Model.ShowTitle)
                                    {
                                        <h2 aria-label="@Model.RootTitle">@Html.PropertyFor(x => x.RootTitle)</h2>
                                    }
                                    @if (Model.ShowSummary)
                                    {
                                        <p>@Html.PropertyFor(x => x.RootSummary)</p>
                                    }
                                </div>
                            }
                            else
                            {
                                if (Model.ShowTitle)
                                {
                                    <h2 aria-label="@Model.RootTitle">@Html.PropertyFor(x => x.RootTitle)</h2>
                                }
                                if (Model.ShowSummary)
                                {
                                    <p>@Html.PropertyFor(x => x.RootSummary)</p>
                                }
                            }
                            @if (item.LinkedContent != null && !string.IsNullOrWhiteSpace(item.LinkedContent?.Href))
                            {
                                /*TODO
                                @StayFarEast.RenderLinkDynamicSite(item, model => model.LinkedContent, Model.RedirectToCurrentSite, isEditable: true)*/

                                @Html.PropertyFor(x => item.LinkedContent)

                            }
                            @if (Model.ShowDivider)
                            {
                                <div class="hidden-xs line-divider pink-line-divider"></div>
                            }
                        </div>
                        <div class="note color-white hidden-xs"><i>@Html.PropertyFor(x => item.Caption)</i></div>
                    </div>
                }

            </div>

            @if (items.Count() > 1)
            {
                <!-- Controls -->
                <a class="left carousel-control" href="#@CarouselIdName" role="button" data-slide="prev">
                    <span class="lnr lnr-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#@CarouselIdName" role="button" data-slide="next">
                    <span class="lnr lnr-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            }
        </div>
    </div>

@if (items.Any(x => x.IsVideo))
{
    <!-- YOUTUBE VIDEO MODAL -->
    <div class="modal fade video" id="@Model.VideoTarget" tabindex="-1" role="dialog" aria-labelledby="@Model.VideoTarget" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" class="close btn" data-dismiss="modal" aria-hidden="true">
                        <a href="#">
                            <p class="pull-left">@DictionaryHelper.DictionaryEntry(DictionaryKeys.CloseButtonText)</p>
                            <div class="burger-bar open">
                                <span></span>
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </a>
                    </button>
                    <div class="embed-responsive embed-responsive-16by9">
                        <iframe allowfullscreen="allowfullscreen" class="embed-responsive-item" width="100%" height="350" src=""></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

    @if (Model.ShowPullOutWidget)
    {
        var fontcolorClass = ContentLoader.Get<HBGNameValuePairBlock>(Model.FontColor)?.Value;
        var backgroundClass = ContentLoader.Get<HBGNameValuePairBlock>(Model.BackgroundColorStyleNames)?.Value;
        <div class="extra-off">
            <div class="extra-offinner">
                <div class="extra-off-title @backgroundClass @fontcolorClass">@Html.PropertyFor(x => x.Pullouttext)</div>
                <div class="extra-off-detail">
                    @if (ContextMode.CurrentMode.EditOrPreview())
                    {
                        @Html.PropertyFor(x => x.LinktoSubscriptionpage)
                        @Html.PropertyFor(x => x.Pullouttextdescription)
                    }
                    else
                    {
                        <a href=@(Model.LinktoSubscriptionpage != null ? Model.LinktoSubscriptionpage?.Href : "#" )> @Html.PropertyFor(x => x.Pullouttextdescription)</a>
                    }
                </div>
            </div>
        </div>
    }
}